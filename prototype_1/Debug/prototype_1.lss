
prototype_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000074e  000007e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000074e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000be  00800102  00800102  000007e4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000814  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00000850  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001963  00000000  00000000  000009a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ca5  00000000  00000000  00002303  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf7  00000000  00000000  00002fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000045c  00000000  00000000  00003ca0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000885  00000000  00000000  000040fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001240  00000000  00000000  00004981  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00005bc1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	24 c0       	rjmp	.+72     	; 0x4a <__ctors_end>
   2:	3e c0       	rjmp	.+124    	; 0x80 <__bad_interrupt>
   4:	3d c0       	rjmp	.+122    	; 0x80 <__bad_interrupt>
   6:	3c c0       	rjmp	.+120    	; 0x80 <__bad_interrupt>
   8:	3b c0       	rjmp	.+118    	; 0x80 <__bad_interrupt>
   a:	3a c0       	rjmp	.+116    	; 0x80 <__bad_interrupt>
   c:	39 c0       	rjmp	.+114    	; 0x80 <__bad_interrupt>
   e:	38 c0       	rjmp	.+112    	; 0x80 <__bad_interrupt>
  10:	c0 c1       	rjmp	.+896    	; 0x392 <__vector_8>
  12:	36 c0       	rjmp	.+108    	; 0x80 <__bad_interrupt>
  14:	35 c0       	rjmp	.+106    	; 0x80 <__bad_interrupt>
  16:	34 c0       	rjmp	.+104    	; 0x80 <__bad_interrupt>
  18:	33 c0       	rjmp	.+102    	; 0x80 <__bad_interrupt>
  1a:	32 c0       	rjmp	.+100    	; 0x80 <__bad_interrupt>
  1c:	31 c0       	rjmp	.+98     	; 0x80 <__bad_interrupt>
  1e:	30 c0       	rjmp	.+96     	; 0x80 <__bad_interrupt>
  20:	70 c1       	rjmp	.+736    	; 0x302 <__vector_16>
  22:	2e c0       	rjmp	.+92     	; 0x80 <__bad_interrupt>
  24:	2d c0       	rjmp	.+90     	; 0x80 <__bad_interrupt>
  26:	2c c0       	rjmp	.+88     	; 0x80 <__bad_interrupt>
  28:	2b c0       	rjmp	.+86     	; 0x80 <__bad_interrupt>
  2a:	2a c0       	rjmp	.+84     	; 0x80 <__bad_interrupt>
  2c:	3c c2       	rjmp	.+1144   	; 0x4a6 <__vector_22>
  2e:	69 c2       	rjmp	.+1234   	; 0x502 <__vector_23>
  30:	13 c2       	rjmp	.+1062   	; 0x458 <__vector_24>
  32:	26 c0       	rjmp	.+76     	; 0x80 <__bad_interrupt>
  34:	f4 c2       	rjmp	.+1512   	; 0x61e <__vector_26>
  36:	21 c3       	rjmp	.+1602   	; 0x67a <__vector_27>
  38:	23 c0       	rjmp	.+70     	; 0x80 <__bad_interrupt>
  3a:	22 c0       	rjmp	.+68     	; 0x80 <__bad_interrupt>
  3c:	e6 c0       	rjmp	.+460    	; 0x20a <ParseData+0x28>
  3e:	ec c0       	rjmp	.+472    	; 0x218 <ParseData+0x36>
  40:	f4 c0       	rjmp	.+488    	; 0x22a <ParseData+0x48>
  42:	fb c0       	rjmp	.+502    	; 0x23a <ParseData+0x58>
  44:	02 c1       	rjmp	.+516    	; 0x24a <ParseData+0x68>
  46:	0f c1       	rjmp	.+542    	; 0x266 <ParseData+0x84>
  48:	22 c1       	rjmp	.+580    	; 0x28e <ParseData+0xac>

0000004a <__ctors_end>:
  4a:	11 24       	eor	r1, r1
  4c:	1f be       	out	0x3f, r1	; 63
  4e:	cf ef       	ldi	r28, 0xFF	; 255
  50:	d2 e0       	ldi	r29, 0x02	; 2
  52:	de bf       	out	0x3e, r29	; 62
  54:	cd bf       	out	0x3d, r28	; 61

00000056 <__do_copy_data>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a0 e0       	ldi	r26, 0x00	; 0
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	ee e4       	ldi	r30, 0x4E	; 78
  5e:	f7 e0       	ldi	r31, 0x07	; 7
  60:	02 c0       	rjmp	.+4      	; 0x66 <__do_copy_data+0x10>
  62:	05 90       	lpm	r0, Z+
  64:	0d 92       	st	X+, r0
  66:	a2 30       	cpi	r26, 0x02	; 2
  68:	b1 07       	cpc	r27, r17
  6a:	d9 f7       	brne	.-10     	; 0x62 <__do_copy_data+0xc>

0000006c <__do_clear_bss>:
  6c:	21 e0       	ldi	r18, 0x01	; 1
  6e:	a2 e0       	ldi	r26, 0x02	; 2
  70:	b1 e0       	ldi	r27, 0x01	; 1
  72:	01 c0       	rjmp	.+2      	; 0x76 <.do_clear_bss_start>

00000074 <.do_clear_bss_loop>:
  74:	1d 92       	st	X+, r1

00000076 <.do_clear_bss_start>:
  76:	a0 3c       	cpi	r26, 0xC0	; 192
  78:	b2 07       	cpc	r27, r18
  7a:	e1 f7       	brne	.-8      	; 0x74 <.do_clear_bss_loop>
  7c:	a8 d1       	rcall	.+848    	; 0x3ce <main>
  7e:	65 c3       	rjmp	.+1738   	; 0x74a <_exit>

00000080 <__bad_interrupt>:
  80:	bf cf       	rjmp	.-130    	; 0x0 <__vectors>

00000082 <CalcCRC>:
{	
	if(u16RPM > u16ExpRPM)
	SpeedDown(5);
	if(u16RPM < u16ExpRPM)
	SpeedUp(5);
}
  82:	fc 01       	movw	r30, r24
  84:	61 15       	cp	r22, r1
  86:	71 05       	cpc	r23, r1
  88:	b9 f0       	breq	.+46     	; 0xb8 <CalcCRC+0x36>
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	40 e0       	ldi	r20, 0x00	; 0
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	df 01       	movw	r26, r30
  94:	a2 0f       	add	r26, r18
  96:	b3 1f       	adc	r27, r19
  98:	9c 91       	ld	r25, X
  9a:	89 27       	eor	r24, r25
  9c:	98 e0       	ldi	r25, 0x08	; 8
  9e:	27 e0       	ldi	r18, 0x07	; 7
  a0:	88 0f       	add	r24, r24
  a2:	08 f4       	brcc	.+2      	; 0xa6 <CalcCRC+0x24>
  a4:	82 27       	eor	r24, r18
  a6:	9a 95       	dec	r25
  a8:	d9 f7       	brne	.-10     	; 0xa0 <CalcCRC+0x1e>
  aa:	4f 5f       	subi	r20, 0xFF	; 255
  ac:	24 2f       	mov	r18, r20
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	26 17       	cp	r18, r22
  b2:	37 07       	cpc	r19, r23
  b4:	70 f3       	brcs	.-36     	; 0x92 <CalcCRC+0x10>
  b6:	08 95       	ret
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	08 95       	ret

000000bc <SendData>:
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	66 97       	sbiw	r28, 0x16	; 22
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61
  d4:	89 01       	movw	r16, r18
  d6:	9a e5       	ldi	r25, 0x5A	; 90
  d8:	99 83       	std	Y+1, r25	; 0x01
  da:	95 ea       	ldi	r25, 0xA5	; 165
  dc:	9a 83       	std	Y+2, r25	; 0x02
  de:	8b 83       	std	Y+3, r24	; 0x03
  e0:	6c 83       	std	Y+4, r22	; 0x04
  e2:	2d 83       	std	Y+5, r18	; 0x05
  e4:	23 2b       	or	r18, r19
  e6:	a1 f0       	breq	.+40     	; 0x110 <SendData+0x54>
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	20 e0       	ldi	r18, 0x00	; 0
  ee:	e6 e0       	ldi	r30, 0x06	; 6
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	ec 0f       	add	r30, r28
  f4:	fd 1f       	adc	r31, r29
  f6:	e2 0f       	add	r30, r18
  f8:	f1 1d       	adc	r31, r1
  fa:	da 01       	movw	r26, r20
  fc:	a8 0f       	add	r26, r24
  fe:	b9 1f       	adc	r27, r25
 100:	8c 91       	ld	r24, X
 102:	80 83       	st	Z, r24
 104:	2f 5f       	subi	r18, 0xFF	; 255
 106:	82 2f       	mov	r24, r18
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	80 17       	cp	r24, r16
 10c:	91 07       	cpc	r25, r17
 10e:	78 f3       	brcs	.-34     	; 0xee <SendData+0x32>
 110:	b8 01       	movw	r22, r16
 112:	6d 5f       	subi	r22, 0xFD	; 253
 114:	7f 4f       	sbci	r23, 0xFF	; 255
 116:	ce 01       	movw	r24, r28
 118:	03 96       	adiw	r24, 0x03	; 3
 11a:	b3 df       	rcall	.-154    	; 0x82 <CalcCRC>
 11c:	fe 01       	movw	r30, r28
 11e:	e0 0f       	add	r30, r16
 120:	f1 1f       	adc	r31, r17
 122:	86 83       	std	Z+6, r24	; 0x06
 124:	b8 01       	movw	r22, r16
 126:	6a 5f       	subi	r22, 0xFA	; 250
 128:	7f 4f       	sbci	r23, 0xFF	; 255
 12a:	ce 01       	movw	r24, r28
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	62 d2       	rcall	.+1220   	; 0x5f4 <uart_putdata>
 130:	66 96       	adiw	r28, 0x16	; 22
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	f8 94       	cli
 136:	de bf       	out	0x3e, r29	; 62
 138:	0f be       	out	0x3f, r0	; 63
 13a:	cd bf       	out	0x3d, r28	; 61
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	08 95       	ret

00000146 <Protocolinit>:
 146:	8f ec       	ldi	r24, 0xCF	; 207
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	05 d2       	rcall	.+1034   	; 0x556 <uart_init>
 14c:	d4 9a       	sbi	0x1a, 4	; 26
 14e:	08 95       	ret

00000150 <ParseFrame>:
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	00 d0       	rcall	.+0      	; 0x156 <ParseFrame+0x6>
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <sFrame>
 15e:	8a 30       	cpi	r24, 0x0A	; 10
 160:	d9 f5       	brne	.+118    	; 0x1d8 <ParseFrame+0x88>
 162:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <sFrame+0x1>
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	a1 f0       	breq	.+40     	; 0x192 <ParseFrame+0x42>
 16a:	18 f4       	brcc	.+6      	; 0x172 <ParseFrame+0x22>
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	31 f0       	breq	.+12     	; 0x17c <ParseFrame+0x2c>
 170:	33 c0       	rjmp	.+102    	; 0x1d8 <ParseFrame+0x88>
 172:	83 30       	cpi	r24, 0x03	; 3
 174:	a1 f0       	breq	.+40     	; 0x19e <ParseFrame+0x4e>
 176:	84 30       	cpi	r24, 0x04	; 4
 178:	29 f1       	breq	.+74     	; 0x1c4 <ParseFrame+0x74>
 17a:	2e c0       	rjmp	.+92     	; 0x1d8 <ParseFrame+0x88>
 17c:	8a ea       	ldi	r24, 0xAA	; 170
 17e:	89 83       	std	Y+1, r24	; 0x01
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	ae 01       	movw	r20, r28
 186:	4f 5f       	subi	r20, 0xFF	; 255
 188:	5f 4f       	sbci	r21, 0xFF	; 255
 18a:	64 e7       	ldi	r22, 0x74	; 116
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	96 df       	rcall	.-212    	; 0xbc <SendData>
 190:	23 c0       	rjmp	.+70     	; 0x1d8 <ParseFrame+0x88>
 192:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <sFrame+0x3>
 196:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <szybkosc>
 19a:	dc 9a       	sbi	0x1b, 4	; 27
 19c:	1d c0       	rjmp	.+58     	; 0x1d8 <ParseFrame+0x88>
 19e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <u16LastRPM>
 1a2:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <u16LastRPM+0x1>
 1a6:	99 83       	std	Y+1, r25	; 0x01
 1a8:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <u16LastRPM>
 1ac:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <u16LastRPM+0x1>
 1b0:	8a 83       	std	Y+2, r24	; 0x02
 1b2:	22 e0       	ldi	r18, 0x02	; 2
 1b4:	30 e0       	ldi	r19, 0x00	; 0
 1b6:	ae 01       	movw	r20, r28
 1b8:	4f 5f       	subi	r20, 0xFF	; 255
 1ba:	5f 4f       	sbci	r21, 0xFF	; 255
 1bc:	64 e7       	ldi	r22, 0x74	; 116
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	7d df       	rcall	.-262    	; 0xbc <SendData>
 1c2:	0a c0       	rjmp	.+20     	; 0x1d8 <ParseFrame+0x88>
 1c4:	86 b7       	in	r24, 0x36	; 54
 1c6:	89 83       	std	Y+1, r24	; 0x01
 1c8:	21 e0       	ldi	r18, 0x01	; 1
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	ae 01       	movw	r20, r28
 1ce:	4f 5f       	subi	r20, 0xFF	; 255
 1d0:	5f 4f       	sbci	r21, 0xFF	; 255
 1d2:	64 e7       	ldi	r22, 0x74	; 116
 1d4:	80 e0       	ldi	r24, 0x00	; 0
 1d6:	72 df       	rcall	.-284    	; 0xbc <SendData>
 1d8:	0f 90       	pop	r0
 1da:	0f 90       	pop	r0
 1dc:	df 91       	pop	r29
 1de:	cf 91       	pop	r28
 1e0:	08 95       	ret

000001e2 <ParseData>:
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	d2 d1       	rcall	.+932    	; 0x58c <uart_getc>
 1e8:	9c 01       	movw	r18, r24
 1ea:	22 27       	eor	r18, r18
 1ec:	23 2b       	or	r18, r19
 1ee:	09 f0       	breq	.+2      	; 0x1f2 <ParseData+0x10>
 1f0:	5e c0       	rjmp	.+188    	; 0x2ae <ParseData+0xcc>
 1f2:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <eProtocolState>
 1f6:	4e 2f       	mov	r20, r30
 1f8:	50 e0       	ldi	r21, 0x00	; 0
 1fa:	47 30       	cpi	r20, 0x07	; 7
 1fc:	51 05       	cpc	r21, r1
 1fe:	08 f0       	brcs	.+2      	; 0x202 <ParseData+0x20>
 200:	56 c0       	rjmp	.+172    	; 0x2ae <ParseData+0xcc>
 202:	fa 01       	movw	r30, r20
 204:	e2 5e       	subi	r30, 0xE2	; 226
 206:	ff 4f       	sbci	r31, 0xFF	; 255
 208:	09 94       	ijmp
 20a:	8a 35       	cpi	r24, 0x5A	; 90
 20c:	09 f0       	breq	.+2      	; 0x210 <ParseData+0x2e>
 20e:	4f c0       	rjmp	.+158    	; 0x2ae <ParseData+0xcc>
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <eProtocolState>
 216:	4b c0       	rjmp	.+150    	; 0x2ae <ParseData+0xcc>
 218:	85 3a       	cpi	r24, 0xA5	; 165
 21a:	21 f4       	brne	.+8      	; 0x224 <ParseData+0x42>
 21c:	82 e0       	ldi	r24, 0x02	; 2
 21e:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <eProtocolState>
 222:	45 c0       	rjmp	.+138    	; 0x2ae <ParseData+0xcc>
 224:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <eProtocolState>
 228:	42 c0       	rjmp	.+132    	; 0x2ae <ParseData+0xcc>
 22a:	e9 e9       	ldi	r30, 0x99	; 153
 22c:	f1 e0       	ldi	r31, 0x01	; 1
 22e:	80 83       	st	Z, r24
 230:	84 8b       	std	Z+20, r24	; 0x14
 232:	83 e0       	ldi	r24, 0x03	; 3
 234:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <eProtocolState>
 238:	3a c0       	rjmp	.+116    	; 0x2ae <ParseData+0xcc>
 23a:	e9 e9       	ldi	r30, 0x99	; 153
 23c:	f1 e0       	ldi	r31, 0x01	; 1
 23e:	81 83       	std	Z+1, r24	; 0x01
 240:	85 8b       	std	Z+21, r24	; 0x15
 242:	84 e0       	ldi	r24, 0x04	; 4
 244:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <eProtocolState>
 248:	32 c0       	rjmp	.+100    	; 0x2ae <ParseData+0xcc>
 24a:	e9 e9       	ldi	r30, 0x99	; 153
 24c:	f1 e0       	ldi	r31, 0x01	; 1
 24e:	82 83       	std	Z+2, r24	; 0x02
 250:	86 8b       	std	Z+22, r24	; 0x16
 252:	88 23       	and	r24, r24
 254:	21 f0       	breq	.+8      	; 0x25e <ParseData+0x7c>
 256:	85 e0       	ldi	r24, 0x05	; 5
 258:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <eProtocolState>
 25c:	28 c0       	rjmp	.+80     	; 0x2ae <ParseData+0xcc>
 25e:	86 e0       	ldi	r24, 0x06	; 6
 260:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <eProtocolState>
 264:	24 c0       	rjmp	.+72     	; 0x2ae <ParseData+0xcc>
 266:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 26a:	e9 2f       	mov	r30, r25
 26c:	f0 e0       	ldi	r31, 0x00	; 0
 26e:	e7 56       	subi	r30, 0x67	; 103
 270:	fe 4f       	sbci	r31, 0xFE	; 254
 272:	83 83       	std	Z+3, r24	; 0x03
 274:	87 8b       	std	Z+23, r24	; 0x17
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	89 0f       	add	r24, r25
 27a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 27e:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <sFrame+0x2>
 282:	89 13       	cpse	r24, r25
 284:	14 c0       	rjmp	.+40     	; 0x2ae <ParseData+0xcc>
 286:	86 e0       	ldi	r24, 0x06	; 6
 288:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <eProtocolState>
 28c:	10 c0       	rjmp	.+32     	; 0x2ae <ParseData+0xcc>
 28e:	c9 e9       	ldi	r28, 0x99	; 153
 290:	d1 e0       	ldi	r29, 0x01	; 1
 292:	8b 8b       	std	Y+19, r24	; 0x13
 294:	6a 81       	ldd	r22, Y+2	; 0x02
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	6d 5f       	subi	r22, 0xFD	; 253
 29a:	7f 4f       	sbci	r23, 0xFF	; 255
 29c:	8d ea       	ldi	r24, 0xAD	; 173
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	f0 de       	rcall	.-544    	; 0x82 <CalcCRC>
 2a2:	9b 89       	ldd	r25, Y+19	; 0x13
 2a4:	89 13       	cpse	r24, r25
 2a6:	01 c0       	rjmp	.+2      	; 0x2aa <ParseData+0xc8>
 2a8:	53 df       	rcall	.-346    	; 0x150 <ParseFrame>
 2aa:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <eProtocolState>
 2ae:	2f ef       	ldi	r18, 0xFF	; 255
 2b0:	81 ee       	ldi	r24, 0xE1	; 225
 2b2:	94 e0       	ldi	r25, 0x04	; 4
 2b4:	21 50       	subi	r18, 0x01	; 1
 2b6:	80 40       	sbci	r24, 0x00	; 0
 2b8:	90 40       	sbci	r25, 0x00	; 0
 2ba:	e1 f7       	brne	.-8      	; 0x2b4 <ParseData+0xd2>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <ParseData+0xdc>
 2be:	00 00       	nop
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	08 95       	ret

000002c6 <SpeedRetrun>:

volatile uint16_t u16tempRPM = 0;

uint16_t SpeedRetrun(uint16_t u16RecivedPeriod, uint8_t u8Checkstop)
{
 2c6:	cf 93       	push	r28
 2c8:	c6 2f       	mov	r28, r22
	uint16_t u16CalculatedRPM;
	//u16CalculatedRPM = 248 * (250000 /u16period); //prescaler = 8
	//u16CalculatedRPM = 31 * (250000 / u16period); //prescaler = 64
 	u16CalculatedRPM = 15 * (62500 / u16RecivedPeriod); //prescaler = 256 previous 31
 2ca:	9c 01       	movw	r18, r24
 2cc:	40 e0       	ldi	r20, 0x00	; 0
 2ce:	50 e0       	ldi	r21, 0x00	; 0
 2d0:	64 e2       	ldi	r22, 0x24	; 36
 2d2:	74 ef       	ldi	r23, 0xF4	; 244
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	1c d2       	rcall	.+1080   	; 0x712 <__divmodsi4>
 2da:	c9 01       	movw	r24, r18
 2dc:	82 95       	swap	r24
 2de:	92 95       	swap	r25
 2e0:	90 7f       	andi	r25, 0xF0	; 240
 2e2:	98 27       	eor	r25, r24
 2e4:	80 7f       	andi	r24, 0xF0	; 240
 2e6:	98 27       	eor	r25, r24
 2e8:	bc 01       	movw	r22, r24
 2ea:	62 1b       	sub	r22, r18
 2ec:	73 0b       	sbc	r23, r19
 2ee:	9b 01       	movw	r18, r22
	if (u8Checkstop == 1)	
 2f0:	c1 30       	cpi	r28, 0x01	; 1
 2f2:	19 f0       	breq	.+6      	; 0x2fa <SpeedRetrun+0x34>
	{
		return 0;
	}
	else
		return u16CalculatedRPM;
 2f4:	86 2f       	mov	r24, r22
 2f6:	93 2f       	mov	r25, r19
 2f8:	02 c0       	rjmp	.+4      	; 0x2fe <SpeedRetrun+0x38>
	//u16CalculatedRPM = 248 * (250000 /u16period); //prescaler = 8
	//u16CalculatedRPM = 31 * (250000 / u16period); //prescaler = 64
 	u16CalculatedRPM = 15 * (62500 / u16RecivedPeriod); //prescaler = 256 previous 31
	if (u8Checkstop == 1)	
	{
		return 0;
 2fa:	80 e0       	ldi	r24, 0x00	; 0
 2fc:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
		return u16CalculatedRPM;
}
 2fe:	cf 91       	pop	r28
 300:	08 95       	ret

00000302 <__vector_16>:
volatile uint8_t u8DeviceAdres = 0;

volatile uint8_t szybkosc = 0;

ISR(TIMER2_CAPT_vect)
{
 302:	1f 92       	push	r1
 304:	0f 92       	push	r0
 306:	0f b6       	in	r0, 0x3f	; 63
 308:	0f 92       	push	r0
 30a:	11 24       	eor	r1, r1
 30c:	2f 93       	push	r18
 30e:	3f 93       	push	r19
 310:	8f 93       	push	r24
 312:	9f 93       	push	r25
 314:	ef 93       	push	r30
 316:	ff 93       	push	r31
	u16CounterDiff = (TCNT2 - u16TmpDiff);
 318:	e6 ec       	ldi	r30, 0xC6	; 198
 31a:	f0 e0       	ldi	r31, 0x00	; 0
 31c:	80 81       	ld	r24, Z
 31e:	91 81       	ldd	r25, Z+1	; 0x01
 320:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <u16TmpDiff>
 324:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <u16TmpDiff+0x1>
 328:	82 1b       	sub	r24, r18
 32a:	93 0b       	sbc	r25, r19
 32c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 330:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	u16TmpDiff = TCNT2;
 334:	80 81       	ld	r24, Z
 336:	91 81       	ldd	r25, Z+1	; 0x01
 338:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <u16TmpDiff+0x1>
 33c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <u16TmpDiff>
	
	TCCR2B ^= (1<<ICES2);
 340:	e9 ec       	ldi	r30, 0xC9	; 201
 342:	f0 e0       	ldi	r31, 0x00	; 0
 344:	90 81       	ld	r25, Z
 346:	80 e4       	ldi	r24, 0x40	; 64
 348:	89 27       	eor	r24, r25
 34a:	80 83       	st	Z, r24
	
	if(u16CounterDiff > 700)
 34c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 350:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 354:	8d 3b       	cpi	r24, 0xBD	; 189
 356:	92 40       	sbci	r25, 0x02	; 2
 358:	40 f0       	brcs	.+16     	; 0x36a <__vector_16+0x68>
	{
		u16Period = u16CounterDiff;
 35a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 35e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 362:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <u16Period+0x1>
 366:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <u16Period>
	}
	
	u16ICPCounter++;	
 36a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <u16ICPCounter>
 36e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <u16ICPCounter+0x1>
 372:	01 96       	adiw	r24, 0x01	; 1
 374:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <u16ICPCounter+0x1>
 378:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <u16ICPCounter>
}
 37c:	ff 91       	pop	r31
 37e:	ef 91       	pop	r30
 380:	9f 91       	pop	r25
 382:	8f 91       	pop	r24
 384:	3f 91       	pop	r19
 386:	2f 91       	pop	r18
 388:	0f 90       	pop	r0
 38a:	0f be       	out	0x3f, r0	; 63
 38c:	0f 90       	pop	r0
 38e:	1f 90       	pop	r1
 390:	18 95       	reti

00000392 <__vector_8>:

ISR(TIMER1_OVF_vect)
{
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	8f 93       	push	r24
 39e:	9f 93       	push	r25
	if(u16ICPCounter == 0)
 3a0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <u16ICPCounter>
 3a4:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <u16ICPCounter+0x1>
 3a8:	89 2b       	or	r24, r25
 3aa:	21 f4       	brne	.+8      	; 0x3b4 <__vector_8+0x22>
	{
		u8stopFlag = 1;
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <u8stopFlag>
 3b2:	02 c0       	rjmp	.+4      	; 0x3b8 <__vector_8+0x26>
	}
	else
		u8stopFlag = 0;
 3b4:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <u8stopFlag>
	u16ICPCounter = 0;	
 3b8:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <u16ICPCounter+0x1>
 3bc:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <u16ICPCounter>
}
 3c0:	9f 91       	pop	r25
 3c2:	8f 91       	pop	r24
 3c4:	0f 90       	pop	r0
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	0f 90       	pop	r0
 3ca:	1f 90       	pop	r1
 3cc:	18 95       	reti

000003ce <main>:

int main(void)
{	
	///////// PWM ///////
	       //76543210
 	DDRA = 0b01110000;
 3ce:	80 e7       	ldi	r24, 0x70	; 112
 3d0:	8a bb       	out	0x1a, r24	; 26
 	DDRB = 0b00000000;
 3d2:	17 ba       	out	0x17, r1	; 23
	//PORTA = 0b01000000;
	TOCPMSA1 = 0x00; //wybór pinu  =0;
 3d4:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__EEPROM_REGION_LENGTH__+0x7f0068>
	TOCPMSA0 = 0x00;
 3d8:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__EEPROM_REGION_LENGTH__+0x7f0067>
		       //76543210	
	TCCR0A =   0b10000011;
 3dc:	83 e8       	ldi	r24, 0x83	; 131
 3de:	80 bf       	out	0x30, r24	; 48
	TCCR0B =   0b00000010;
 3e0:	82 e0       	ldi	r24, 0x02	; 2
 3e2:	83 bf       	out	0x33, r24	; 51
	TOCPMCOE |= (1<<TOCC5OE);  
 3e4:	e6 e6       	ldi	r30, 0x66	; 102
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	80 62       	ori	r24, 0x20	; 32
 3ec:	80 83       	st	Z, r24
	OCR0A = 0; //Default speed 680 RPM
 3ee:	16 be       	out	0x36, r1	; 54
	  
	///////// ICP ///////
			 //76543210
	TCCR2A = 0b00000000;
 3f0:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
	//TCCR2B = 0b10000010; //prescaler = 8	
	//TCCR2B = 0b10000011; //prescaler = 64
	TCCR2B = 0b11000100; //prescaler = 256
 3f4:	84 ec       	ldi	r24, 0xC4	; 196
 3f6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
	TIMSK2 |= (1<<ICIE2);
 3fa:	8d 9a       	sbi	0x11, 5	; 17
	
	//////// wykrycie zatrzymania
	TCCR1A = 0b00000000;
 3fc:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00000100;
 3fe:	84 e0       	ldi	r24, 0x04	; 4
 400:	8e bd       	out	0x2e, r24	; 46
	TIMSK1 |= (1<<TOIE1); 	
 402:	78 9a       	sbi	0x0f, 0	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 404:	2f ef       	ldi	r18, 0xFF	; 255
 406:	80 e7       	ldi	r24, 0x70	; 112
 408:	92 e0       	ldi	r25, 0x02	; 2
 40a:	21 50       	subi	r18, 0x01	; 1
 40c:	80 40       	sbci	r24, 0x00	; 0
 40e:	90 40       	sbci	r25, 0x00	; 0
 410:	e1 f7       	brne	.-8      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 412:	00 c0       	rjmp	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 414:	00 00       	nop
	
	//////// ADRES ////
	_delay_ms(50);
	//u8DeviceAdres = ReadArdress();
	u8DeviceAdres = 10;
 416:	8a e0       	ldi	r24, 0x0A	; 10
 418:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <u8DeviceAdres>
	DDRA |= (1<<DDRA0);
 41c:	d0 9a       	sbi	0x1a, 0	; 26
	/////// UART ////////
	Protocolinit();
 41e:	93 de       	rcall	.-730    	; 0x146 <Protocolinit>
	//PORTA |= (1<<PORTA4); //wysylanie
	
	sei();
 420:	78 94       	sei
 422:	2f ef       	ldi	r18, 0xFF	; 255
 424:	86 e7       	ldi	r24, 0x76	; 118
 426:	91 e0       	ldi	r25, 0x01	; 1
 428:	21 50       	subi	r18, 0x01	; 1
 42a:	80 40       	sbci	r24, 0x00	; 0
 42c:	90 40       	sbci	r25, 0x00	; 0
 42e:	e1 f7       	brne	.-8      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 430:	00 c0       	rjmp	.+0      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 432:	00 00       	nop
	
	//PORTA |= (1<<PORTA4); //wysylanie
	while(1)
	{
		//if(TXC0 == 1)			
			PORTA &=~ (1<<PORTA4); //odbieranie
 434:	dc 98       	cbi	0x1b, 4	; 27
			
		u16LastRPM = SpeedRetrun(u16Period, u8stopFlag);
 436:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <u8stopFlag>
 43a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <u16Period>
 43e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <u16Period+0x1>
 442:	41 df       	rcall	.-382    	; 0x2c6 <SpeedRetrun>
 444:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <u16LastRPM+0x1>
 448:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <u16LastRPM>
		//PID(u16SetRPM, u16LastRPM);		
		ParseData();
 44c:	ca de       	rcall	.-620    	; 0x1e2 <ParseData>
		OCR0A = szybkosc;
 44e:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <szybkosc>
 452:	86 bf       	out	0x36, r24	; 54
		
		//if(TXC0 == 1)			
			PORTA &=~ (1<<PORTA4); //odbieranie
 454:	dc 98       	cbi	0x1b, 4	; 27
 456:	ee cf       	rjmp	.-36     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>

00000458 <__vector_24>:
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);

}/* uart_puts_p */
 458:	1f 92       	push	r1
 45a:	0f 92       	push	r0
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	0f 92       	push	r0
 460:	11 24       	eor	r1, r1
 462:	2f 93       	push	r18
 464:	3f 93       	push	r19
 466:	8f 93       	push	r24
 468:	9f 93       	push	r25
 46a:	ef 93       	push	r30
 46c:	ff 93       	push	r31
 46e:	e5 e8       	ldi	r30, 0x85	; 133
 470:	f0 e0       	ldi	r31, 0x00	; 0
 472:	80 81       	ld	r24, Z
 474:	8f 7b       	andi	r24, 0xBF	; 191
 476:	80 83       	st	Z, r24
 478:	dc 98       	cbi	0x1b, 4	; 27
 47a:	3b b3       	in	r19, 0x1b	; 27
 47c:	2b b3       	in	r18, 0x1b	; 27
 47e:	81 e0       	ldi	r24, 0x01	; 1
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	02 c0       	rjmp	.+4      	; 0x488 <__vector_24+0x30>
 484:	88 0f       	add	r24, r24
 486:	99 1f       	adc	r25, r25
 488:	3a 95       	dec	r19
 48a:	e2 f7       	brpl	.-8      	; 0x484 <__vector_24+0x2c>
 48c:	82 27       	eor	r24, r18
 48e:	8b bb       	out	0x1b, r24	; 27
 490:	ff 91       	pop	r31
 492:	ef 91       	pop	r30
 494:	9f 91       	pop	r25
 496:	8f 91       	pop	r24
 498:	3f 91       	pop	r19
 49a:	2f 91       	pop	r18
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

000004a6 <__vector_22>:
 4a6:	1f 92       	push	r1
 4a8:	0f 92       	push	r0
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	0f 92       	push	r0
 4ae:	11 24       	eor	r1, r1
 4b0:	2f 93       	push	r18
 4b2:	8f 93       	push	r24
 4b4:	9f 93       	push	r25
 4b6:	ef 93       	push	r30
 4b8:	ff 93       	push	r31
 4ba:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
 4be:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
 4c2:	8c 71       	andi	r24, 0x1C	; 28
 4c4:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <UART_RxHead>
 4c8:	ef 5f       	subi	r30, 0xFF	; 255
 4ca:	ef 71       	andi	r30, 0x1F	; 31
 4cc:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <UART_RxTail>
 4d0:	e9 17       	cp	r30, r25
 4d2:	39 f0       	breq	.+14     	; 0x4e2 <__vector_22+0x3c>
 4d4:	e0 93 55 01 	sts	0x0155, r30	; 0x800155 <UART_RxHead>
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	e8 5a       	subi	r30, 0xA8	; 168
 4dc:	fe 4f       	sbci	r31, 0xFE	; 254
 4de:	20 83       	st	Z, r18
 4e0:	01 c0       	rjmp	.+2      	; 0x4e4 <__vector_22+0x3e>
 4e2:	82 e0       	ldi	r24, 0x02	; 2
 4e4:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <UART_LastRxError>
 4e8:	89 2b       	or	r24, r25
 4ea:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <UART_LastRxError>
 4ee:	ff 91       	pop	r31
 4f0:	ef 91       	pop	r30
 4f2:	9f 91       	pop	r25
 4f4:	8f 91       	pop	r24
 4f6:	2f 91       	pop	r18
 4f8:	0f 90       	pop	r0
 4fa:	0f be       	out	0x3f, r0	; 63
 4fc:	0f 90       	pop	r0
 4fe:	1f 90       	pop	r1
 500:	18 95       	reti

00000502 <__vector_23>:
 502:	1f 92       	push	r1
 504:	0f 92       	push	r0
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	0f 92       	push	r0
 50a:	11 24       	eor	r1, r1
 50c:	8f 93       	push	r24
 50e:	9f 93       	push	r25
 510:	ef 93       	push	r30
 512:	ff 93       	push	r31
 514:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <UART_TxHead>
 518:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <UART_TxTail>
 51c:	98 17       	cp	r25, r24
 51e:	69 f0       	breq	.+26     	; 0x53a <__vector_23+0x38>
 520:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <UART_TxTail>
 524:	ef 5f       	subi	r30, 0xFF	; 255
 526:	ef 71       	andi	r30, 0x1F	; 31
 528:	e0 93 56 01 	sts	0x0156, r30	; 0x800156 <UART_TxTail>
 52c:	f0 e0       	ldi	r31, 0x00	; 0
 52e:	e8 58       	subi	r30, 0x88	; 136
 530:	fe 4f       	sbci	r31, 0xFE	; 254
 532:	80 81       	ld	r24, Z
 534:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
 538:	05 c0       	rjmp	.+10     	; 0x544 <__vector_23+0x42>
 53a:	e5 e8       	ldi	r30, 0x85	; 133
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	80 81       	ld	r24, Z
 540:	8f 7d       	andi	r24, 0xDF	; 223
 542:	80 83       	st	Z, r24
 544:	ff 91       	pop	r31
 546:	ef 91       	pop	r30
 548:	9f 91       	pop	r25
 54a:	8f 91       	pop	r24
 54c:	0f 90       	pop	r0
 54e:	0f be       	out	0x3f, r0	; 63
 550:	0f 90       	pop	r0
 552:	1f 90       	pop	r1
 554:	18 95       	reti

00000556 <uart_init>:
 556:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <UART_TxHead>
 55a:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <UART_TxTail>
 55e:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <UART_RxHead>
 562:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <UART_RxTail>
 566:	99 23       	and	r25, r25
 568:	1c f4       	brge	.+6      	; 0x570 <uart_init+0x1a>
 56a:	22 e0       	ldi	r18, 0x02	; 2
 56c:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
 570:	90 78       	andi	r25, 0x80	; 128
 572:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <__EEPROM_REGION_LENGTH__+0x7f0082>
 576:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
 57a:	88 e9       	ldi	r24, 0x98	; 152
 57c:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
 580:	86 e0       	ldi	r24, 0x06	; 6
 582:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
 586:	d4 9a       	sbi	0x1a, 4	; 26
 588:	dc 98       	cbi	0x1b, 4	; 27
 58a:	08 95       	ret

0000058c <uart_getc>:
 58c:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <UART_RxHead>
 590:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <UART_RxTail>
 594:	98 17       	cp	r25, r24
 596:	a9 f0       	breq	.+42     	; 0x5c2 <uart_getc+0x36>
 598:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <UART_RxTail>
 59c:	9f 5f       	subi	r25, 0xFF	; 255
 59e:	9f 71       	andi	r25, 0x1F	; 31
 5a0:	e9 2f       	mov	r30, r25
 5a2:	f0 e0       	ldi	r31, 0x00	; 0
 5a4:	e8 5a       	subi	r30, 0xA8	; 168
 5a6:	fe 4f       	sbci	r31, 0xFE	; 254
 5a8:	20 81       	ld	r18, Z
 5aa:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <UART_LastRxError>
 5ae:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <UART_RxTail>
 5b2:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <UART_LastRxError>
 5b6:	90 e0       	ldi	r25, 0x00	; 0
 5b8:	98 2f       	mov	r25, r24
 5ba:	88 27       	eor	r24, r24
 5bc:	82 0f       	add	r24, r18
 5be:	91 1d       	adc	r25, r1
 5c0:	08 95       	ret
 5c2:	80 e0       	ldi	r24, 0x00	; 0
 5c4:	91 e0       	ldi	r25, 0x01	; 1
 5c6:	08 95       	ret

000005c8 <uart_putc>:
 5c8:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <UART_TxHead>
 5cc:	2f 5f       	subi	r18, 0xFF	; 255
 5ce:	2f 71       	andi	r18, 0x1F	; 31
 5d0:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <UART_TxTail>
 5d4:	29 17       	cp	r18, r25
 5d6:	e1 f3       	breq	.-8      	; 0x5d0 <uart_putc+0x8>
 5d8:	e2 2f       	mov	r30, r18
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	e8 58       	subi	r30, 0x88	; 136
 5de:	fe 4f       	sbci	r31, 0xFE	; 254
 5e0:	80 83       	st	Z, r24
 5e2:	20 93 57 01 	sts	0x0157, r18	; 0x800157 <UART_TxHead>
 5e6:	dc 9a       	sbi	0x1b, 4	; 27
 5e8:	e5 e8       	ldi	r30, 0x85	; 133
 5ea:	f0 e0       	ldi	r31, 0x00	; 0
 5ec:	80 81       	ld	r24, Z
 5ee:	80 62       	ori	r24, 0x20	; 32
 5f0:	80 83       	st	Z, r24
 5f2:	08 95       	ret

000005f4 <uart_putdata>:
 5f4:	0f 93       	push	r16
 5f6:	1f 93       	push	r17
 5f8:	cf 93       	push	r28
 5fa:	df 93       	push	r29
 5fc:	61 15       	cp	r22, r1
 5fe:	71 05       	cpc	r23, r1
 600:	49 f0       	breq	.+18     	; 0x614 <uart_putdata+0x20>
 602:	8c 01       	movw	r16, r24
 604:	ec 01       	movw	r28, r24
 606:	06 0f       	add	r16, r22
 608:	17 1f       	adc	r17, r23
 60a:	89 91       	ld	r24, Y+
 60c:	dd df       	rcall	.-70     	; 0x5c8 <uart_putc>
 60e:	c0 17       	cp	r28, r16
 610:	d1 07       	cpc	r29, r17
 612:	d9 f7       	brne	.-10     	; 0x60a <uart_putdata+0x16>
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	1f 91       	pop	r17
 61a:	0f 91       	pop	r16
 61c:	08 95       	ret

0000061e <__vector_26>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
 61e:	1f 92       	push	r1
 620:	0f 92       	push	r0
 622:	0f b6       	in	r0, 0x3f	; 63
 624:	0f 92       	push	r0
 626:	11 24       	eor	r1, r1
 628:	2f 93       	push	r18
 62a:	8f 93       	push	r24
 62c:	9f 93       	push	r25
 62e:	ef 93       	push	r30
 630:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
 632:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__EEPROM_REGION_LENGTH__+0x7f0096>
    data = UART1_DATA;
 636:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <__EEPROM_REGION_LENGTH__+0x7f0090>
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
 63a:	8c 71       	andi	r24, 0x1C	; 28
            
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
 63c:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <UART1_RxHead>
 640:	ef 5f       	subi	r30, 0xFF	; 255
 642:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
 644:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <UART1_RxTail>
 648:	e9 17       	cp	r30, r25
 64a:	39 f0       	breq	.+14     	; 0x65a <__vector_26+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
 64c:	e0 93 10 01 	sts	0x0110, r30	; 0x800110 <UART1_RxHead>
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
 650:	f0 e0       	ldi	r31, 0x00	; 0
 652:	ed 5e       	subi	r30, 0xED	; 237
 654:	fe 4f       	sbci	r31, 0xFE	; 254
 656:	20 83       	st	Z, r18
 658:	01 c0       	rjmp	.+2      	; 0x65c <__vector_26+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 65a:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART1_RxHead = tmphead;
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    }
    UART1_LastRxError |= lastRxError;   
 65c:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <UART1_LastRxError>
 660:	89 2b       	or	r24, r25
 662:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <UART1_LastRxError>
}
 666:	ff 91       	pop	r31
 668:	ef 91       	pop	r30
 66a:	9f 91       	pop	r25
 66c:	8f 91       	pop	r24
 66e:	2f 91       	pop	r18
 670:	0f 90       	pop	r0
 672:	0f be       	out	0x3f, r0	; 63
 674:	0f 90       	pop	r0
 676:	1f 90       	pop	r1
 678:	18 95       	reti

0000067a <__vector_27>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 67a:	1f 92       	push	r1
 67c:	0f 92       	push	r0
 67e:	0f b6       	in	r0, 0x3f	; 63
 680:	0f 92       	push	r0
 682:	11 24       	eor	r1, r1
 684:	8f 93       	push	r24
 686:	9f 93       	push	r25
 688:	ef 93       	push	r30
 68a:	ff 93       	push	r31
    unsigned char tmptail;
	//I_WILL_BE_TRANSMITTING;
    
    if ( UART1_TxHead != UART1_TxTail) {
 68c:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <UART1_TxHead>
 690:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <UART1_TxTail>
 694:	98 17       	cp	r25, r24
 696:	69 f0       	breq	.+26     	; 0x6b2 <__vector_27+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
 698:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <UART1_TxTail>
 69c:	ef 5f       	subi	r30, 0xFF	; 255
 69e:	ef 71       	andi	r30, 0x1F	; 31
        UART1_TxTail = tmptail;
 6a0:	e0 93 11 01 	sts	0x0111, r30	; 0x800111 <UART1_TxTail>
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
 6a4:	f0 e0       	ldi	r31, 0x00	; 0
 6a6:	ed 5c       	subi	r30, 0xCD	; 205
 6a8:	fe 4f       	sbci	r31, 0xFE	; 254
 6aa:	80 81       	ld	r24, Z
 6ac:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__EEPROM_REGION_LENGTH__+0x7f0090>
 6b0:	05 c0       	rjmp	.+10     	; 0x6bc <__vector_27+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
 6b2:	e5 e9       	ldi	r30, 0x95	; 149
 6b4:	f0 e0       	ldi	r31, 0x00	; 0
 6b6:	80 81       	ld	r24, Z
 6b8:	8f 7d       	andi	r24, 0xDF	; 223
 6ba:	80 83       	st	Z, r24
    }
}
 6bc:	ff 91       	pop	r31
 6be:	ef 91       	pop	r30
 6c0:	9f 91       	pop	r25
 6c2:	8f 91       	pop	r24
 6c4:	0f 90       	pop	r0
 6c6:	0f be       	out	0x3f, r0	; 63
 6c8:	0f 90       	pop	r0
 6ca:	1f 90       	pop	r1
 6cc:	18 95       	reti

000006ce <__udivmodsi4>:
 6ce:	a1 e2       	ldi	r26, 0x21	; 33
 6d0:	1a 2e       	mov	r1, r26
 6d2:	aa 1b       	sub	r26, r26
 6d4:	bb 1b       	sub	r27, r27
 6d6:	fd 01       	movw	r30, r26
 6d8:	0d c0       	rjmp	.+26     	; 0x6f4 <__udivmodsi4_ep>

000006da <__udivmodsi4_loop>:
 6da:	aa 1f       	adc	r26, r26
 6dc:	bb 1f       	adc	r27, r27
 6de:	ee 1f       	adc	r30, r30
 6e0:	ff 1f       	adc	r31, r31
 6e2:	a2 17       	cp	r26, r18
 6e4:	b3 07       	cpc	r27, r19
 6e6:	e4 07       	cpc	r30, r20
 6e8:	f5 07       	cpc	r31, r21
 6ea:	20 f0       	brcs	.+8      	; 0x6f4 <__udivmodsi4_ep>
 6ec:	a2 1b       	sub	r26, r18
 6ee:	b3 0b       	sbc	r27, r19
 6f0:	e4 0b       	sbc	r30, r20
 6f2:	f5 0b       	sbc	r31, r21

000006f4 <__udivmodsi4_ep>:
 6f4:	66 1f       	adc	r22, r22
 6f6:	77 1f       	adc	r23, r23
 6f8:	88 1f       	adc	r24, r24
 6fa:	99 1f       	adc	r25, r25
 6fc:	1a 94       	dec	r1
 6fe:	69 f7       	brne	.-38     	; 0x6da <__udivmodsi4_loop>
 700:	60 95       	com	r22
 702:	70 95       	com	r23
 704:	80 95       	com	r24
 706:	90 95       	com	r25
 708:	9b 01       	movw	r18, r22
 70a:	ac 01       	movw	r20, r24
 70c:	bd 01       	movw	r22, r26
 70e:	cf 01       	movw	r24, r30
 710:	08 95       	ret

00000712 <__divmodsi4>:
 712:	05 2e       	mov	r0, r21
 714:	97 fb       	bst	r25, 7
 716:	16 f4       	brtc	.+4      	; 0x71c <__divmodsi4+0xa>
 718:	00 94       	com	r0
 71a:	0f d0       	rcall	.+30     	; 0x73a <__negsi2>
 71c:	57 fd       	sbrc	r21, 7
 71e:	05 d0       	rcall	.+10     	; 0x72a <__divmodsi4_neg2>
 720:	d6 df       	rcall	.-84     	; 0x6ce <__udivmodsi4>
 722:	07 fc       	sbrc	r0, 7
 724:	02 d0       	rcall	.+4      	; 0x72a <__divmodsi4_neg2>
 726:	46 f4       	brtc	.+16     	; 0x738 <__divmodsi4_exit>
 728:	08 c0       	rjmp	.+16     	; 0x73a <__negsi2>

0000072a <__divmodsi4_neg2>:
 72a:	50 95       	com	r21
 72c:	40 95       	com	r20
 72e:	30 95       	com	r19
 730:	21 95       	neg	r18
 732:	3f 4f       	sbci	r19, 0xFF	; 255
 734:	4f 4f       	sbci	r20, 0xFF	; 255
 736:	5f 4f       	sbci	r21, 0xFF	; 255

00000738 <__divmodsi4_exit>:
 738:	08 95       	ret

0000073a <__negsi2>:
 73a:	90 95       	com	r25
 73c:	80 95       	com	r24
 73e:	70 95       	com	r23
 740:	61 95       	neg	r22
 742:	7f 4f       	sbci	r23, 0xFF	; 255
 744:	8f 4f       	sbci	r24, 0xFF	; 255
 746:	9f 4f       	sbci	r25, 0xFF	; 255
 748:	08 95       	ret

0000074a <_exit>:
 74a:	f8 94       	cli

0000074c <__stop_program>:
 74c:	ff cf       	rjmp	.-2      	; 0x74c <__stop_program>
