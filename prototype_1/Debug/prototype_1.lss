
prototype_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000073a  000007ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000073a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000be  00800102  00800102  000007d0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007d0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000800  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000192d  00000000  00000000  0000098c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c7b  00000000  00000000  000022b9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000bd6  00000000  00000000  00002f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000450  00000000  00000000  00003b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000089b  00000000  00000000  00003f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000117e  00000000  00000000  000047f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00005975  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	24 c0       	rjmp	.+72     	; 0x4a <__ctors_end>
   2:	3e c0       	rjmp	.+124    	; 0x80 <__bad_interrupt>
   4:	3d c0       	rjmp	.+122    	; 0x80 <__bad_interrupt>
   6:	3c c0       	rjmp	.+120    	; 0x80 <__bad_interrupt>
   8:	3b c0       	rjmp	.+118    	; 0x80 <__bad_interrupt>
   a:	3a c0       	rjmp	.+116    	; 0x80 <__bad_interrupt>
   c:	39 c0       	rjmp	.+114    	; 0x80 <__bad_interrupt>
   e:	38 c0       	rjmp	.+112    	; 0x80 <__bad_interrupt>
  10:	b6 c1       	rjmp	.+876    	; 0x37e <__vector_8>
  12:	36 c0       	rjmp	.+108    	; 0x80 <__bad_interrupt>
  14:	35 c0       	rjmp	.+106    	; 0x80 <__bad_interrupt>
  16:	34 c0       	rjmp	.+104    	; 0x80 <__bad_interrupt>
  18:	33 c0       	rjmp	.+102    	; 0x80 <__bad_interrupt>
  1a:	32 c0       	rjmp	.+100    	; 0x80 <__bad_interrupt>
  1c:	31 c0       	rjmp	.+98     	; 0x80 <__bad_interrupt>
  1e:	30 c0       	rjmp	.+96     	; 0x80 <__bad_interrupt>
  20:	66 c1       	rjmp	.+716    	; 0x2ee <__vector_16>
  22:	2e c0       	rjmp	.+92     	; 0x80 <__bad_interrupt>
  24:	2d c0       	rjmp	.+90     	; 0x80 <__bad_interrupt>
  26:	2c c0       	rjmp	.+88     	; 0x80 <__bad_interrupt>
  28:	2b c0       	rjmp	.+86     	; 0x80 <__bad_interrupt>
  2a:	2a c0       	rjmp	.+84     	; 0x80 <__bad_interrupt>
  2c:	19 c2       	rjmp	.+1074   	; 0x460 <__vector_22>
  2e:	46 c2       	rjmp	.+1164   	; 0x4bc <__vector_23>
  30:	72 c2       	rjmp	.+1252   	; 0x516 <__vector_24>
  32:	26 c0       	rjmp	.+76     	; 0x80 <__bad_interrupt>
  34:	ea c2       	rjmp	.+1492   	; 0x60a <__vector_26>
  36:	17 c3       	rjmp	.+1582   	; 0x666 <__vector_27>
  38:	23 c0       	rjmp	.+70     	; 0x80 <__bad_interrupt>
  3a:	22 c0       	rjmp	.+68     	; 0x80 <__bad_interrupt>
  3c:	e5 c0       	rjmp	.+458    	; 0x208 <ParseData+0x28>
  3e:	eb c0       	rjmp	.+470    	; 0x216 <ParseData+0x36>
  40:	f3 c0       	rjmp	.+486    	; 0x228 <ParseData+0x48>
  42:	fa c0       	rjmp	.+500    	; 0x238 <ParseData+0x58>
  44:	01 c1       	rjmp	.+514    	; 0x248 <ParseData+0x68>
  46:	0e c1       	rjmp	.+540    	; 0x264 <ParseData+0x84>
  48:	21 c1       	rjmp	.+578    	; 0x28c <ParseData+0xac>

0000004a <__ctors_end>:
  4a:	11 24       	eor	r1, r1
  4c:	1f be       	out	0x3f, r1	; 63
  4e:	cf ef       	ldi	r28, 0xFF	; 255
  50:	d2 e0       	ldi	r29, 0x02	; 2
  52:	de bf       	out	0x3e, r29	; 62
  54:	cd bf       	out	0x3d, r28	; 61

00000056 <__do_copy_data>:
  56:	11 e0       	ldi	r17, 0x01	; 1
  58:	a0 e0       	ldi	r26, 0x00	; 0
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	ea e3       	ldi	r30, 0x3A	; 58
  5e:	f7 e0       	ldi	r31, 0x07	; 7
  60:	02 c0       	rjmp	.+4      	; 0x66 <__do_copy_data+0x10>
  62:	05 90       	lpm	r0, Z+
  64:	0d 92       	st	X+, r0
  66:	a2 30       	cpi	r26, 0x02	; 2
  68:	b1 07       	cpc	r27, r17
  6a:	d9 f7       	brne	.-10     	; 0x62 <__do_copy_data+0xc>

0000006c <__do_clear_bss>:
  6c:	21 e0       	ldi	r18, 0x01	; 1
  6e:	a2 e0       	ldi	r26, 0x02	; 2
  70:	b1 e0       	ldi	r27, 0x01	; 1
  72:	01 c0       	rjmp	.+2      	; 0x76 <.do_clear_bss_start>

00000074 <.do_clear_bss_loop>:
  74:	1d 92       	st	X+, r1

00000076 <.do_clear_bss_start>:
  76:	a0 3c       	cpi	r26, 0xC0	; 192
  78:	b2 07       	cpc	r27, r18
  7a:	e1 f7       	brne	.-8      	; 0x74 <.do_clear_bss_loop>
  7c:	9e d1       	rcall	.+828    	; 0x3ba <main>
  7e:	5b c3       	rjmp	.+1718   	; 0x736 <_exit>

00000080 <__bad_interrupt>:
  80:	bf cf       	rjmp	.-130    	; 0x0 <__vectors>

00000082 <CalcCRC>:
{	
	if(u16RPM > u16ExpRPM)
	SpeedDown(5);
	if(u16RPM < u16ExpRPM)
	SpeedUp(5);
}
  82:	fc 01       	movw	r30, r24
  84:	61 15       	cp	r22, r1
  86:	71 05       	cpc	r23, r1
  88:	b9 f0       	breq	.+46     	; 0xb8 <CalcCRC+0x36>
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	40 e0       	ldi	r20, 0x00	; 0
  90:	80 e0       	ldi	r24, 0x00	; 0
  92:	df 01       	movw	r26, r30
  94:	a2 0f       	add	r26, r18
  96:	b3 1f       	adc	r27, r19
  98:	9c 91       	ld	r25, X
  9a:	89 27       	eor	r24, r25
  9c:	98 e0       	ldi	r25, 0x08	; 8
  9e:	27 e0       	ldi	r18, 0x07	; 7
  a0:	88 0f       	add	r24, r24
  a2:	08 f4       	brcc	.+2      	; 0xa6 <CalcCRC+0x24>
  a4:	82 27       	eor	r24, r18
  a6:	9a 95       	dec	r25
  a8:	d9 f7       	brne	.-10     	; 0xa0 <CalcCRC+0x1e>
  aa:	4f 5f       	subi	r20, 0xFF	; 255
  ac:	24 2f       	mov	r18, r20
  ae:	30 e0       	ldi	r19, 0x00	; 0
  b0:	26 17       	cp	r18, r22
  b2:	37 07       	cpc	r19, r23
  b4:	70 f3       	brcs	.-36     	; 0x92 <CalcCRC+0x10>
  b6:	08 95       	ret
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	08 95       	ret

000000bc <SendData>:
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
  c8:	66 97       	sbiw	r28, 0x16	; 22
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	f8 94       	cli
  ce:	de bf       	out	0x3e, r29	; 62
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	cd bf       	out	0x3d, r28	; 61
  d4:	89 01       	movw	r16, r18
  d6:	9a e5       	ldi	r25, 0x5A	; 90
  d8:	99 83       	std	Y+1, r25	; 0x01
  da:	95 ea       	ldi	r25, 0xA5	; 165
  dc:	9a 83       	std	Y+2, r25	; 0x02
  de:	8b 83       	std	Y+3, r24	; 0x03
  e0:	6c 83       	std	Y+4, r22	; 0x04
  e2:	2d 83       	std	Y+5, r18	; 0x05
  e4:	23 2b       	or	r18, r19
  e6:	a1 f0       	breq	.+40     	; 0x110 <SendData+0x54>
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	e6 e0       	ldi	r30, 0x06	; 6
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	ec 0f       	add	r30, r28
  f4:	fd 1f       	adc	r31, r29
  f6:	e3 0f       	add	r30, r19
  f8:	f1 1d       	adc	r31, r1
  fa:	da 01       	movw	r26, r20
  fc:	a8 0f       	add	r26, r24
  fe:	b9 1f       	adc	r27, r25
 100:	8c 91       	ld	r24, X
 102:	80 83       	st	Z, r24
 104:	3f 5f       	subi	r19, 0xFF	; 255
 106:	83 2f       	mov	r24, r19
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	80 17       	cp	r24, r16
 10c:	91 07       	cpc	r25, r17
 10e:	78 f3       	brcs	.-34     	; 0xee <SendData+0x32>
 110:	b8 01       	movw	r22, r16
 112:	6d 5f       	subi	r22, 0xFD	; 253
 114:	7f 4f       	sbci	r23, 0xFF	; 255
 116:	ce 01       	movw	r24, r28
 118:	03 96       	adiw	r24, 0x03	; 3
 11a:	b3 df       	rcall	.-154    	; 0x82 <CalcCRC>
 11c:	fe 01       	movw	r30, r28
 11e:	e0 0f       	add	r30, r16
 120:	f1 1f       	adc	r31, r17
 122:	86 83       	std	Z+6, r24	; 0x06
 124:	b8 01       	movw	r22, r16
 126:	6a 5f       	subi	r22, 0xFA	; 250
 128:	7f 4f       	sbci	r23, 0xFF	; 255
 12a:	ce 01       	movw	r24, r28
 12c:	01 96       	adiw	r24, 0x01	; 1
 12e:	58 d2       	rcall	.+1200   	; 0x5e0 <uart_putdata>
 130:	66 96       	adiw	r28, 0x16	; 22
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	f8 94       	cli
 136:	de bf       	out	0x3e, r29	; 62
 138:	0f be       	out	0x3f, r0	; 63
 13a:	cd bf       	out	0x3d, r28	; 61
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	1f 91       	pop	r17
 142:	0f 91       	pop	r16
 144:	08 95       	ret

00000146 <Protocolinit>:
 146:	8f ec       	ldi	r24, 0xCF	; 207
 148:	90 e0       	ldi	r25, 0x00	; 0
 14a:	fb d1       	rcall	.+1014   	; 0x542 <uart_init>
 14c:	d4 9a       	sbi	0x1a, 4	; 26
 14e:	08 95       	ret

00000150 <ParseFrame>:
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	00 d0       	rcall	.+0      	; 0x156 <ParseFrame+0x6>
 156:	cd b7       	in	r28, 0x3d	; 61
 158:	de b7       	in	r29, 0x3e	; 62
 15a:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <sFrame>
 15e:	8a 30       	cpi	r24, 0x0A	; 10
 160:	d1 f5       	brne	.+116    	; 0x1d6 <ParseFrame+0x86>
 162:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <sFrame+0x1>
 166:	82 30       	cpi	r24, 0x02	; 2
 168:	a1 f0       	breq	.+40     	; 0x192 <ParseFrame+0x42>
 16a:	18 f4       	brcc	.+6      	; 0x172 <ParseFrame+0x22>
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	31 f0       	breq	.+12     	; 0x17c <ParseFrame+0x2c>
 170:	32 c0       	rjmp	.+100    	; 0x1d6 <ParseFrame+0x86>
 172:	83 30       	cpi	r24, 0x03	; 3
 174:	99 f0       	breq	.+38     	; 0x19c <ParseFrame+0x4c>
 176:	84 30       	cpi	r24, 0x04	; 4
 178:	21 f1       	breq	.+72     	; 0x1c2 <ParseFrame+0x72>
 17a:	2d c0       	rjmp	.+90     	; 0x1d6 <ParseFrame+0x86>
 17c:	8a ea       	ldi	r24, 0xAA	; 170
 17e:	89 83       	std	Y+1, r24	; 0x01
 180:	21 e0       	ldi	r18, 0x01	; 1
 182:	30 e0       	ldi	r19, 0x00	; 0
 184:	ae 01       	movw	r20, r28
 186:	4f 5f       	subi	r20, 0xFF	; 255
 188:	5f 4f       	sbci	r21, 0xFF	; 255
 18a:	64 e7       	ldi	r22, 0x74	; 116
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	96 df       	rcall	.-212    	; 0xbc <SendData>
 190:	22 c0       	rjmp	.+68     	; 0x1d6 <ParseFrame+0x86>
 192:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <sFrame+0x3>
 196:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <szybkosc>
 19a:	1d c0       	rjmp	.+58     	; 0x1d6 <ParseFrame+0x86>
 19c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <u16LastRPM>
 1a0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <u16LastRPM+0x1>
 1a4:	99 83       	std	Y+1, r25	; 0x01
 1a6:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <u16LastRPM>
 1aa:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <u16LastRPM+0x1>
 1ae:	8a 83       	std	Y+2, r24	; 0x02
 1b0:	22 e0       	ldi	r18, 0x02	; 2
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	ae 01       	movw	r20, r28
 1b6:	4f 5f       	subi	r20, 0xFF	; 255
 1b8:	5f 4f       	sbci	r21, 0xFF	; 255
 1ba:	64 e7       	ldi	r22, 0x74	; 116
 1bc:	80 e0       	ldi	r24, 0x00	; 0
 1be:	7e df       	rcall	.-260    	; 0xbc <SendData>
 1c0:	0a c0       	rjmp	.+20     	; 0x1d6 <ParseFrame+0x86>
 1c2:	86 b7       	in	r24, 0x36	; 54
 1c4:	89 83       	std	Y+1, r24	; 0x01
 1c6:	21 e0       	ldi	r18, 0x01	; 1
 1c8:	30 e0       	ldi	r19, 0x00	; 0
 1ca:	ae 01       	movw	r20, r28
 1cc:	4f 5f       	subi	r20, 0xFF	; 255
 1ce:	5f 4f       	sbci	r21, 0xFF	; 255
 1d0:	64 e7       	ldi	r22, 0x74	; 116
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	73 df       	rcall	.-282    	; 0xbc <SendData>
 1d6:	0f 90       	pop	r0
 1d8:	0f 90       	pop	r0
 1da:	df 91       	pop	r29
 1dc:	cf 91       	pop	r28
 1de:	08 95       	ret

000001e0 <ParseData>:
 1e0:	cf 93       	push	r28
 1e2:	df 93       	push	r29
 1e4:	c9 d1       	rcall	.+914    	; 0x578 <uart_getc>
 1e6:	9c 01       	movw	r18, r24
 1e8:	22 27       	eor	r18, r18
 1ea:	23 2b       	or	r18, r19
 1ec:	09 f0       	breq	.+2      	; 0x1f0 <ParseData+0x10>
 1ee:	5e c0       	rjmp	.+188    	; 0x2ac <ParseData+0xcc>
 1f0:	e0 91 98 01 	lds	r30, 0x0198	; 0x800198 <eProtocolState>
 1f4:	4e 2f       	mov	r20, r30
 1f6:	50 e0       	ldi	r21, 0x00	; 0
 1f8:	47 30       	cpi	r20, 0x07	; 7
 1fa:	51 05       	cpc	r21, r1
 1fc:	08 f0       	brcs	.+2      	; 0x200 <ParseData+0x20>
 1fe:	56 c0       	rjmp	.+172    	; 0x2ac <ParseData+0xcc>
 200:	fa 01       	movw	r30, r20
 202:	e2 5e       	subi	r30, 0xE2	; 226
 204:	ff 4f       	sbci	r31, 0xFF	; 255
 206:	09 94       	ijmp
 208:	8a 35       	cpi	r24, 0x5A	; 90
 20a:	09 f0       	breq	.+2      	; 0x20e <ParseData+0x2e>
 20c:	4f c0       	rjmp	.+158    	; 0x2ac <ParseData+0xcc>
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <eProtocolState>
 214:	4b c0       	rjmp	.+150    	; 0x2ac <ParseData+0xcc>
 216:	85 3a       	cpi	r24, 0xA5	; 165
 218:	21 f4       	brne	.+8      	; 0x222 <ParseData+0x42>
 21a:	82 e0       	ldi	r24, 0x02	; 2
 21c:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <eProtocolState>
 220:	45 c0       	rjmp	.+138    	; 0x2ac <ParseData+0xcc>
 222:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <eProtocolState>
 226:	42 c0       	rjmp	.+132    	; 0x2ac <ParseData+0xcc>
 228:	e9 e9       	ldi	r30, 0x99	; 153
 22a:	f1 e0       	ldi	r31, 0x01	; 1
 22c:	80 83       	st	Z, r24
 22e:	84 8b       	std	Z+20, r24	; 0x14
 230:	83 e0       	ldi	r24, 0x03	; 3
 232:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <eProtocolState>
 236:	3a c0       	rjmp	.+116    	; 0x2ac <ParseData+0xcc>
 238:	e9 e9       	ldi	r30, 0x99	; 153
 23a:	f1 e0       	ldi	r31, 0x01	; 1
 23c:	81 83       	std	Z+1, r24	; 0x01
 23e:	85 8b       	std	Z+21, r24	; 0x15
 240:	84 e0       	ldi	r24, 0x04	; 4
 242:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <eProtocolState>
 246:	32 c0       	rjmp	.+100    	; 0x2ac <ParseData+0xcc>
 248:	e9 e9       	ldi	r30, 0x99	; 153
 24a:	f1 e0       	ldi	r31, 0x01	; 1
 24c:	82 83       	std	Z+2, r24	; 0x02
 24e:	86 8b       	std	Z+22, r24	; 0x16
 250:	88 23       	and	r24, r24
 252:	21 f0       	breq	.+8      	; 0x25c <ParseData+0x7c>
 254:	85 e0       	ldi	r24, 0x05	; 5
 256:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <eProtocolState>
 25a:	28 c0       	rjmp	.+80     	; 0x2ac <ParseData+0xcc>
 25c:	86 e0       	ldi	r24, 0x06	; 6
 25e:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <eProtocolState>
 262:	24 c0       	rjmp	.+72     	; 0x2ac <ParseData+0xcc>
 264:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 268:	e9 2f       	mov	r30, r25
 26a:	f0 e0       	ldi	r31, 0x00	; 0
 26c:	e7 56       	subi	r30, 0x67	; 103
 26e:	fe 4f       	sbci	r31, 0xFE	; 254
 270:	83 83       	std	Z+3, r24	; 0x03
 272:	87 8b       	std	Z+23, r24	; 0x17
 274:	81 e0       	ldi	r24, 0x01	; 1
 276:	89 0f       	add	r24, r25
 278:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
 27c:	90 91 9b 01 	lds	r25, 0x019B	; 0x80019b <sFrame+0x2>
 280:	89 13       	cpse	r24, r25
 282:	14 c0       	rjmp	.+40     	; 0x2ac <ParseData+0xcc>
 284:	86 e0       	ldi	r24, 0x06	; 6
 286:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <eProtocolState>
 28a:	10 c0       	rjmp	.+32     	; 0x2ac <ParseData+0xcc>
 28c:	c9 e9       	ldi	r28, 0x99	; 153
 28e:	d1 e0       	ldi	r29, 0x01	; 1
 290:	8b 8b       	std	Y+19, r24	; 0x13
 292:	6a 81       	ldd	r22, Y+2	; 0x02
 294:	70 e0       	ldi	r23, 0x00	; 0
 296:	6d 5f       	subi	r22, 0xFD	; 253
 298:	7f 4f       	sbci	r23, 0xFF	; 255
 29a:	8d ea       	ldi	r24, 0xAD	; 173
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	f1 de       	rcall	.-542    	; 0x82 <CalcCRC>
 2a0:	9b 89       	ldd	r25, Y+19	; 0x13
 2a2:	98 13       	cpse	r25, r24
 2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <ParseData+0xc8>
 2a6:	54 df       	rcall	.-344    	; 0x150 <ParseFrame>
 2a8:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <eProtocolState>
 2ac:	df 91       	pop	r29
 2ae:	cf 91       	pop	r28
 2b0:	08 95       	ret

000002b2 <SpeedRetrun>:

volatile uint16_t u16tempRPM = 0;

uint16_t SpeedRetrun(uint16_t u16RecivedPeriod, uint8_t u8Checkstop)
{
 2b2:	cf 93       	push	r28
 2b4:	c6 2f       	mov	r28, r22
	uint16_t u16CalculatedRPM;
	//u16CalculatedRPM = 248 * (250000 /u16period); //prescaler = 8
	//u16CalculatedRPM = 31 * (250000 / u16period); //prescaler = 64
 	u16CalculatedRPM = 15 * (62500 / u16RecivedPeriod); //prescaler = 256 previous 31
 2b6:	9c 01       	movw	r18, r24
 2b8:	40 e0       	ldi	r20, 0x00	; 0
 2ba:	50 e0       	ldi	r21, 0x00	; 0
 2bc:	64 e2       	ldi	r22, 0x24	; 36
 2be:	74 ef       	ldi	r23, 0xF4	; 244
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	1c d2       	rcall	.+1080   	; 0x6fe <__divmodsi4>
 2c6:	c9 01       	movw	r24, r18
 2c8:	82 95       	swap	r24
 2ca:	92 95       	swap	r25
 2cc:	90 7f       	andi	r25, 0xF0	; 240
 2ce:	98 27       	eor	r25, r24
 2d0:	80 7f       	andi	r24, 0xF0	; 240
 2d2:	98 27       	eor	r25, r24
 2d4:	bc 01       	movw	r22, r24
 2d6:	62 1b       	sub	r22, r18
 2d8:	73 0b       	sbc	r23, r19
 2da:	9b 01       	movw	r18, r22
	if (u8Checkstop == 1)	
 2dc:	c1 30       	cpi	r28, 0x01	; 1
 2de:	19 f0       	breq	.+6      	; 0x2e6 <SpeedRetrun+0x34>
	{
		return 0;
	}
	else
		return u16CalculatedRPM;
 2e0:	86 2f       	mov	r24, r22
 2e2:	93 2f       	mov	r25, r19
 2e4:	02 c0       	rjmp	.+4      	; 0x2ea <SpeedRetrun+0x38>
	//u16CalculatedRPM = 248 * (250000 /u16period); //prescaler = 8
	//u16CalculatedRPM = 31 * (250000 / u16period); //prescaler = 64
 	u16CalculatedRPM = 15 * (62500 / u16RecivedPeriod); //prescaler = 256 previous 31
	if (u8Checkstop == 1)	
	{
		return 0;
 2e6:	80 e0       	ldi	r24, 0x00	; 0
 2e8:	90 e0       	ldi	r25, 0x00	; 0
	}
	else
		return u16CalculatedRPM;
}
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <__vector_16>:
volatile uint8_t u8DeviceAdres = 0;

volatile uint8_t szybkosc = 0;

ISR(TIMER2_CAPT_vect)
{
 2ee:	1f 92       	push	r1
 2f0:	0f 92       	push	r0
 2f2:	0f b6       	in	r0, 0x3f	; 63
 2f4:	0f 92       	push	r0
 2f6:	11 24       	eor	r1, r1
 2f8:	2f 93       	push	r18
 2fa:	3f 93       	push	r19
 2fc:	8f 93       	push	r24
 2fe:	9f 93       	push	r25
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
	u16CounterDiff = (TCNT2 - u16TmpDiff);
 304:	e6 ec       	ldi	r30, 0xC6	; 198
 306:	f0 e0       	ldi	r31, 0x00	; 0
 308:	80 81       	ld	r24, Z
 30a:	91 81       	ldd	r25, Z+1	; 0x01
 30c:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <u16TmpDiff>
 310:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <u16TmpDiff+0x1>
 314:	82 1b       	sub	r24, r18
 316:	93 0b       	sbc	r25, r19
 318:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 31c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	u16TmpDiff = TCNT2;
 320:	80 81       	ld	r24, Z
 322:	91 81       	ldd	r25, Z+1	; 0x01
 324:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <u16TmpDiff+0x1>
 328:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <u16TmpDiff>
	
	TCCR2B ^= (1<<ICES2);
 32c:	e9 ec       	ldi	r30, 0xC9	; 201
 32e:	f0 e0       	ldi	r31, 0x00	; 0
 330:	90 81       	ld	r25, Z
 332:	80 e4       	ldi	r24, 0x40	; 64
 334:	89 27       	eor	r24, r25
 336:	80 83       	st	Z, r24
	
	if(u16CounterDiff > 700)
 338:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 33c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 340:	8d 3b       	cpi	r24, 0xBD	; 189
 342:	92 40       	sbci	r25, 0x02	; 2
 344:	40 f0       	brcs	.+16     	; 0x356 <__stack+0x57>
	{
		u16Period = u16CounterDiff;
 346:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 34a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 34e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <u16Period+0x1>
 352:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <u16Period>
	}
	
	u16ICPCounter++;	
 356:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <u16ICPCounter>
 35a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <u16ICPCounter+0x1>
 35e:	01 96       	adiw	r24, 0x01	; 1
 360:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <u16ICPCounter+0x1>
 364:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <u16ICPCounter>
}
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	9f 91       	pop	r25
 36e:	8f 91       	pop	r24
 370:	3f 91       	pop	r19
 372:	2f 91       	pop	r18
 374:	0f 90       	pop	r0
 376:	0f be       	out	0x3f, r0	; 63
 378:	0f 90       	pop	r0
 37a:	1f 90       	pop	r1
 37c:	18 95       	reti

0000037e <__vector_8>:

ISR(TIMER1_OVF_vect)
{
 37e:	1f 92       	push	r1
 380:	0f 92       	push	r0
 382:	0f b6       	in	r0, 0x3f	; 63
 384:	0f 92       	push	r0
 386:	11 24       	eor	r1, r1
 388:	8f 93       	push	r24
 38a:	9f 93       	push	r25
	if(u16ICPCounter == 0)
 38c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <u16ICPCounter>
 390:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <u16ICPCounter+0x1>
 394:	89 2b       	or	r24, r25
 396:	21 f4       	brne	.+8      	; 0x3a0 <__vector_8+0x22>
	{
		u8stopFlag = 1;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <u8stopFlag>
 39e:	02 c0       	rjmp	.+4      	; 0x3a4 <__vector_8+0x26>
	}
	else
		u8stopFlag = 0;
 3a0:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <u8stopFlag>
	u16ICPCounter = 0;	
 3a4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <u16ICPCounter+0x1>
 3a8:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <u16ICPCounter>
}
 3ac:	9f 91       	pop	r25
 3ae:	8f 91       	pop	r24
 3b0:	0f 90       	pop	r0
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	0f 90       	pop	r0
 3b6:	1f 90       	pop	r1
 3b8:	18 95       	reti

000003ba <main>:

int main(void)
{	
	///////// PWM ///////
	       //76543210
 	DDRA = 0b01110000;
 3ba:	80 e7       	ldi	r24, 0x70	; 112
 3bc:	8a bb       	out	0x1a, r24	; 26
 	DDRB = 0b00000000;
 3be:	17 ba       	out	0x17, r1	; 23
	//PORTA = 0b01000000;
	TOCPMSA1 = 0x00; //wybór pinu  =0;
 3c0:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__EEPROM_REGION_LENGTH__+0x7f0068>
	TOCPMSA0 = 0x00;
 3c4:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__EEPROM_REGION_LENGTH__+0x7f0067>
		       //76543210	
	TCCR0A =   0b10000011;
 3c8:	83 e8       	ldi	r24, 0x83	; 131
 3ca:	80 bf       	out	0x30, r24	; 48
	TCCR0B =   0b00000010;
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	83 bf       	out	0x33, r24	; 51
	TOCPMCOE |= (1<<TOCC5OE);  
 3d0:	e6 e6       	ldi	r30, 0x66	; 102
 3d2:	f0 e0       	ldi	r31, 0x00	; 0
 3d4:	80 81       	ld	r24, Z
 3d6:	80 62       	ori	r24, 0x20	; 32
 3d8:	80 83       	st	Z, r24
	OCR0A = 0; //Default speed 680 RPM
 3da:	16 be       	out	0x36, r1	; 54
	  
	///////// ICP ///////
			 //76543210
	TCCR2A = 0b00000000;
 3dc:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <__EEPROM_REGION_LENGTH__+0x7f00ca>
	//TCCR2B = 0b10000010; //prescaler = 8	
	//TCCR2B = 0b10000011; //prescaler = 64
	TCCR2B = 0b11000100; //prescaler = 256
 3e0:	84 ec       	ldi	r24, 0xC4	; 196
 3e2:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__EEPROM_REGION_LENGTH__+0x7f00c9>
	TIMSK2 |= (1<<ICIE2);
 3e6:	8d 9a       	sbi	0x11, 5	; 17
	
	//////// wykrycie zatrzymania
	TCCR1A = 0b00000000;
 3e8:	1f bc       	out	0x2f, r1	; 47
	TCCR1B = 0b00000100;
 3ea:	84 e0       	ldi	r24, 0x04	; 4
 3ec:	8e bd       	out	0x2e, r24	; 46
	TIMSK1 |= (1<<TOIE1); 	
 3ee:	78 9a       	sbi	0x0f, 0	; 15
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f0:	2f ef       	ldi	r18, 0xFF	; 255
 3f2:	30 e7       	ldi	r19, 0x70	; 112
 3f4:	82 e0       	ldi	r24, 0x02	; 2
 3f6:	21 50       	subi	r18, 0x01	; 1
 3f8:	30 40       	sbci	r19, 0x00	; 0
 3fa:	80 40       	sbci	r24, 0x00	; 0
 3fc:	e1 f7       	brne	.-8      	; 0x3f6 <main+0x3c>
 3fe:	00 c0       	rjmp	.+0      	; 0x400 <__LOCK_REGION_LENGTH__>
 400:	00 00       	nop
	
	//////// ADRES ////
	_delay_ms(50);
	//u8DeviceAdres = ReadArdress();
	u8DeviceAdres = 10;
 402:	8a e0       	ldi	r24, 0x0A	; 10
 404:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <u8DeviceAdres>
	DDRA |= (1<<DDRA3);
 408:	d3 9a       	sbi	0x1a, 3	; 26
	/////// UART ////////
	Protocolinit();
 40a:	9d de       	rcall	.-710    	; 0x146 <Protocolinit>
	//PORTA |= (1<<PORTA4); //wysylanie
	
	sei();
 40c:	78 94       	sei
 40e:	9f ef       	ldi	r25, 0xFF	; 255
 410:	26 e7       	ldi	r18, 0x76	; 118
 412:	31 e0       	ldi	r19, 0x01	; 1
 414:	91 50       	subi	r25, 0x01	; 1
 416:	20 40       	sbci	r18, 0x00	; 0
 418:	30 40       	sbci	r19, 0x00	; 0
 41a:	e1 f7       	brne	.-8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
	
	//uart_puts("PwmFan");
	_delay_ms(30);
	PORTA ^= (1<<PORTA3);
 420:	9b b3       	in	r25, 0x1b	; 27
 422:	88 e0       	ldi	r24, 0x08	; 8
 424:	98 27       	eor	r25, r24
 426:	9b bb       	out	0x1b, r25	; 27
 428:	9f ef       	ldi	r25, 0xFF	; 255
 42a:	23 ec       	ldi	r18, 0xC3	; 195
 42c:	39 e0       	ldi	r19, 0x09	; 9
 42e:	91 50       	subi	r25, 0x01	; 1
 430:	20 40       	sbci	r18, 0x00	; 0
 432:	30 40       	sbci	r19, 0x00	; 0
 434:	e1 f7       	brne	.-8      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 438:	00 00       	nop
	_delay_ms(200);
	PORTA ^= (1<<PORTA3);
 43a:	9b b3       	in	r25, 0x1b	; 27
 43c:	89 27       	eor	r24, r25
 43e:	8b bb       	out	0x1b, r24	; 27
	while(1)
	{
// 		if(TXC0 == 1)			
// 			PORTA &=~ (1<<PORTA4); //odbieranie
			
		u16LastRPM = SpeedRetrun(u16Period, u8stopFlag);
 440:	60 91 09 01 	lds	r22, 0x0109	; 0x800109 <u8stopFlag>
 444:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <u16Period>
 448:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <u16Period+0x1>
 44c:	32 df       	rcall	.-412    	; 0x2b2 <SpeedRetrun>
 44e:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <u16LastRPM+0x1>
 452:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <u16LastRPM>
		//PID(u16SetRPM, u16LastRPM);		
		ParseData();
 456:	c4 de       	rcall	.-632    	; 0x1e0 <ParseData>
		OCR0A = szybkosc;
 458:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <szybkosc>
 45c:	86 bf       	out	0x36, r24	; 54
// 			uart_puts("\n");
// 			_delay_ms(1000);
			//PORTA &=~ (1<<PORTA4); //odbieranie
			//u16ster = 0x00;
		//}		
	};
 45e:	f0 cf       	rjmp	.-32     	; 0x440 <__LOCK_REGION_LENGTH__+0x40>

00000460 <__vector_22>:
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);

}/* uart_puts_p */
 460:	1f 92       	push	r1
 462:	0f 92       	push	r0
 464:	0f b6       	in	r0, 0x3f	; 63
 466:	0f 92       	push	r0
 468:	11 24       	eor	r1, r1
 46a:	2f 93       	push	r18
 46c:	8f 93       	push	r24
 46e:	9f 93       	push	r25
 470:	ef 93       	push	r30
 472:	ff 93       	push	r31
 474:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
 478:	20 91 80 00 	lds	r18, 0x0080	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
 47c:	8c 71       	andi	r24, 0x1C	; 28
 47e:	e0 91 55 01 	lds	r30, 0x0155	; 0x800155 <UART_RxHead>
 482:	ef 5f       	subi	r30, 0xFF	; 255
 484:	ef 71       	andi	r30, 0x1F	; 31
 486:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <UART_RxTail>
 48a:	e9 17       	cp	r30, r25
 48c:	39 f0       	breq	.+14     	; 0x49c <__vector_22+0x3c>
 48e:	e0 93 55 01 	sts	0x0155, r30	; 0x800155 <UART_RxHead>
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	e8 5a       	subi	r30, 0xA8	; 168
 496:	fe 4f       	sbci	r31, 0xFE	; 254
 498:	20 83       	st	Z, r18
 49a:	01 c0       	rjmp	.+2      	; 0x49e <__vector_22+0x3e>
 49c:	82 e0       	ldi	r24, 0x02	; 2
 49e:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <UART_LastRxError>
 4a2:	89 2b       	or	r24, r25
 4a4:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <UART_LastRxError>
 4a8:	ff 91       	pop	r31
 4aa:	ef 91       	pop	r30
 4ac:	9f 91       	pop	r25
 4ae:	8f 91       	pop	r24
 4b0:	2f 91       	pop	r18
 4b2:	0f 90       	pop	r0
 4b4:	0f be       	out	0x3f, r0	; 63
 4b6:	0f 90       	pop	r0
 4b8:	1f 90       	pop	r1
 4ba:	18 95       	reti

000004bc <__vector_23>:
 4bc:	1f 92       	push	r1
 4be:	0f 92       	push	r0
 4c0:	0f b6       	in	r0, 0x3f	; 63
 4c2:	0f 92       	push	r0
 4c4:	11 24       	eor	r1, r1
 4c6:	8f 93       	push	r24
 4c8:	9f 93       	push	r25
 4ca:	ef 93       	push	r30
 4cc:	ff 93       	push	r31
 4ce:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <UART_TxHead>
 4d2:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <UART_TxTail>
 4d6:	98 17       	cp	r25, r24
 4d8:	69 f0       	breq	.+26     	; 0x4f4 <__vector_23+0x38>
 4da:	e0 91 56 01 	lds	r30, 0x0156	; 0x800156 <UART_TxTail>
 4de:	ef 5f       	subi	r30, 0xFF	; 255
 4e0:	ef 71       	andi	r30, 0x1F	; 31
 4e2:	e0 93 56 01 	sts	0x0156, r30	; 0x800156 <UART_TxTail>
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	e8 58       	subi	r30, 0x88	; 136
 4ea:	fe 4f       	sbci	r31, 0xFE	; 254
 4ec:	80 81       	ld	r24, Z
 4ee:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__EEPROM_REGION_LENGTH__+0x7f0080>
 4f2:	08 c0       	rjmp	.+16     	; 0x504 <__vector_23+0x48>
 4f4:	e5 e8       	ldi	r30, 0x85	; 133
 4f6:	f0 e0       	ldi	r31, 0x00	; 0
 4f8:	80 81       	ld	r24, Z
 4fa:	80 64       	ori	r24, 0x40	; 64
 4fc:	80 83       	st	Z, r24
 4fe:	80 81       	ld	r24, Z
 500:	8f 7d       	andi	r24, 0xDF	; 223
 502:	80 83       	st	Z, r24
 504:	ff 91       	pop	r31
 506:	ef 91       	pop	r30
 508:	9f 91       	pop	r25
 50a:	8f 91       	pop	r24
 50c:	0f 90       	pop	r0
 50e:	0f be       	out	0x3f, r0	; 63
 510:	0f 90       	pop	r0
 512:	1f 90       	pop	r1
 514:	18 95       	reti

00000516 <__vector_24>:
 516:	1f 92       	push	r1
 518:	0f 92       	push	r0
 51a:	0f b6       	in	r0, 0x3f	; 63
 51c:	0f 92       	push	r0
 51e:	11 24       	eor	r1, r1
 520:	8f 93       	push	r24
 522:	ef 93       	push	r30
 524:	ff 93       	push	r31
 526:	e5 e8       	ldi	r30, 0x85	; 133
 528:	f0 e0       	ldi	r31, 0x00	; 0
 52a:	80 81       	ld	r24, Z
 52c:	8f 7b       	andi	r24, 0xBF	; 191
 52e:	80 83       	st	Z, r24
 530:	dc 98       	cbi	0x1b, 4	; 27
 532:	ff 91       	pop	r31
 534:	ef 91       	pop	r30
 536:	8f 91       	pop	r24
 538:	0f 90       	pop	r0
 53a:	0f be       	out	0x3f, r0	; 63
 53c:	0f 90       	pop	r0
 53e:	1f 90       	pop	r1
 540:	18 95       	reti

00000542 <uart_init>:
 542:	10 92 57 01 	sts	0x0157, r1	; 0x800157 <UART_TxHead>
 546:	10 92 56 01 	sts	0x0156, r1	; 0x800156 <UART_TxTail>
 54a:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <UART_RxHead>
 54e:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <UART_RxTail>
 552:	99 23       	and	r25, r25
 554:	1c f4       	brge	.+6      	; 0x55c <uart_init+0x1a>
 556:	22 e0       	ldi	r18, 0x02	; 2
 558:	20 93 86 00 	sts	0x0086, r18	; 0x800086 <__EEPROM_REGION_LENGTH__+0x7f0086>
 55c:	90 78       	andi	r25, 0x80	; 128
 55e:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <__EEPROM_REGION_LENGTH__+0x7f0082>
 562:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__EEPROM_REGION_LENGTH__+0x7f0081>
 566:	88 e9       	ldi	r24, 0x98	; 152
 568:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <__EEPROM_REGION_LENGTH__+0x7f0085>
 56c:	86 e0       	ldi	r24, 0x06	; 6
 56e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__EEPROM_REGION_LENGTH__+0x7f0084>
 572:	d4 9a       	sbi	0x1a, 4	; 26
 574:	dc 98       	cbi	0x1b, 4	; 27
 576:	08 95       	ret

00000578 <uart_getc>:
 578:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <UART_RxHead>
 57c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <UART_RxTail>
 580:	98 17       	cp	r25, r24
 582:	a9 f0       	breq	.+42     	; 0x5ae <uart_getc+0x36>
 584:	90 91 54 01 	lds	r25, 0x0154	; 0x800154 <UART_RxTail>
 588:	9f 5f       	subi	r25, 0xFF	; 255
 58a:	9f 71       	andi	r25, 0x1F	; 31
 58c:	e9 2f       	mov	r30, r25
 58e:	f0 e0       	ldi	r31, 0x00	; 0
 590:	e8 5a       	subi	r30, 0xA8	; 168
 592:	fe 4f       	sbci	r31, 0xFE	; 254
 594:	20 81       	ld	r18, Z
 596:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <UART_LastRxError>
 59a:	90 93 54 01 	sts	0x0154, r25	; 0x800154 <UART_RxTail>
 59e:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <UART_LastRxError>
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	98 2f       	mov	r25, r24
 5a6:	88 27       	eor	r24, r24
 5a8:	82 0f       	add	r24, r18
 5aa:	91 1d       	adc	r25, r1
 5ac:	08 95       	ret
 5ae:	80 e0       	ldi	r24, 0x00	; 0
 5b0:	91 e0       	ldi	r25, 0x01	; 1
 5b2:	08 95       	ret

000005b4 <uart_putc>:
 5b4:	20 91 57 01 	lds	r18, 0x0157	; 0x800157 <UART_TxHead>
 5b8:	2f 5f       	subi	r18, 0xFF	; 255
 5ba:	2f 71       	andi	r18, 0x1F	; 31
 5bc:	90 91 56 01 	lds	r25, 0x0156	; 0x800156 <UART_TxTail>
 5c0:	29 17       	cp	r18, r25
 5c2:	e1 f3       	breq	.-8      	; 0x5bc <uart_putc+0x8>
 5c4:	e2 2f       	mov	r30, r18
 5c6:	f0 e0       	ldi	r31, 0x00	; 0
 5c8:	e8 58       	subi	r30, 0x88	; 136
 5ca:	fe 4f       	sbci	r31, 0xFE	; 254
 5cc:	80 83       	st	Z, r24
 5ce:	20 93 57 01 	sts	0x0157, r18	; 0x800157 <UART_TxHead>
 5d2:	dc 9a       	sbi	0x1b, 4	; 27
 5d4:	e5 e8       	ldi	r30, 0x85	; 133
 5d6:	f0 e0       	ldi	r31, 0x00	; 0
 5d8:	80 81       	ld	r24, Z
 5da:	80 62       	ori	r24, 0x20	; 32
 5dc:	80 83       	st	Z, r24
 5de:	08 95       	ret

000005e0 <uart_putdata>:
 5e0:	0f 93       	push	r16
 5e2:	1f 93       	push	r17
 5e4:	cf 93       	push	r28
 5e6:	df 93       	push	r29
 5e8:	61 15       	cp	r22, r1
 5ea:	71 05       	cpc	r23, r1
 5ec:	49 f0       	breq	.+18     	; 0x600 <uart_putdata+0x20>
 5ee:	8c 01       	movw	r16, r24
 5f0:	ec 01       	movw	r28, r24
 5f2:	06 0f       	add	r16, r22
 5f4:	17 1f       	adc	r17, r23
 5f6:	89 91       	ld	r24, Y+
 5f8:	dd df       	rcall	.-70     	; 0x5b4 <uart_putc>
 5fa:	c0 17       	cp	r28, r16
 5fc:	d1 07       	cpc	r29, r17
 5fe:	d9 f7       	brne	.-10     	; 0x5f6 <uart_putdata+0x16>
 600:	df 91       	pop	r29
 602:	cf 91       	pop	r28
 604:	1f 91       	pop	r17
 606:	0f 91       	pop	r16
 608:	08 95       	ret

0000060a <__vector_26>:
ISR(UART1_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART1 Receive Complete interrupt
Purpose:  called when the UART1 has received a character
**************************************************************************/
{
 60a:	1f 92       	push	r1
 60c:	0f 92       	push	r0
 60e:	0f b6       	in	r0, 0x3f	; 63
 610:	0f 92       	push	r0
 612:	11 24       	eor	r1, r1
 614:	2f 93       	push	r18
 616:	8f 93       	push	r24
 618:	9f 93       	push	r25
 61a:	ef 93       	push	r30
 61c:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART1_STATUS;
 61e:	80 91 96 00 	lds	r24, 0x0096	; 0x800096 <__EEPROM_REGION_LENGTH__+0x7f0096>
    data = UART1_DATA;
 622:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <__EEPROM_REGION_LENGTH__+0x7f0090>
    
    /* get FEn (Frame Error) DORn (Data OverRun) UPEn (USART Parity Error) bits */
    lastRxError = usr & (_BV(FE1)|_BV(DOR1)|_BV(UPE1) );
 626:	8c 71       	andi	r24, 0x1C	; 28
            
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
 628:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <UART1_RxHead>
 62c:	ef 5f       	subi	r30, 0xFF	; 255
 62e:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART1_RxTail ) {
 630:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <UART1_RxTail>
 634:	e9 17       	cp	r30, r25
 636:	39 f0       	breq	.+14     	; 0x646 <__vector_26+0x3c>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART1_RxHead = tmphead;
 638:	e0 93 10 01 	sts	0x0110, r30	; 0x800110 <UART1_RxHead>
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
 63c:	f0 e0       	ldi	r31, 0x00	; 0
 63e:	ed 5e       	subi	r30, 0xED	; 237
 640:	fe 4f       	sbci	r31, 0xFE	; 254
 642:	20 83       	st	Z, r18
 644:	01 c0       	rjmp	.+2      	; 0x648 <__vector_26+0x3e>
    /* calculate buffer index */ 
    tmphead = ( UART1_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART1_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 646:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART1_RxHead = tmphead;
        /* store received data in buffer */
        UART1_RxBuf[tmphead] = data;
    }
    UART1_LastRxError |= lastRxError;   
 648:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <UART1_LastRxError>
 64c:	89 2b       	or	r24, r25
 64e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <UART1_LastRxError>
}
 652:	ff 91       	pop	r31
 654:	ef 91       	pop	r30
 656:	9f 91       	pop	r25
 658:	8f 91       	pop	r24
 65a:	2f 91       	pop	r18
 65c:	0f 90       	pop	r0
 65e:	0f be       	out	0x3f, r0	; 63
 660:	0f 90       	pop	r0
 662:	1f 90       	pop	r1
 664:	18 95       	reti

00000666 <__vector_27>:
ISR(UART1_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART1 Data Register Empty interrupt
Purpose:  called when the UART1 is ready to transmit the next byte
**************************************************************************/
{
 666:	1f 92       	push	r1
 668:	0f 92       	push	r0
 66a:	0f b6       	in	r0, 0x3f	; 63
 66c:	0f 92       	push	r0
 66e:	11 24       	eor	r1, r1
 670:	8f 93       	push	r24
 672:	9f 93       	push	r25
 674:	ef 93       	push	r30
 676:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART1_TxHead != UART1_TxTail) {
 678:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <UART1_TxHead>
 67c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <UART1_TxTail>
 680:	98 17       	cp	r25, r24
 682:	69 f0       	breq	.+26     	; 0x69e <__vector_27+0x38>
        /* calculate and store new buffer index */
        tmptail = (UART1_TxTail + 1) & UART_TX_BUFFER_MASK;
 684:	e0 91 11 01 	lds	r30, 0x0111	; 0x800111 <UART1_TxTail>
 688:	ef 5f       	subi	r30, 0xFF	; 255
 68a:	ef 71       	andi	r30, 0x1F	; 31
        UART1_TxTail = tmptail;
 68c:	e0 93 11 01 	sts	0x0111, r30	; 0x800111 <UART1_TxTail>
        /* get one byte from buffer and write it to UART */
        UART1_DATA = UART1_TxBuf[tmptail];  /* start transmission */
 690:	f0 e0       	ldi	r31, 0x00	; 0
 692:	ed 5c       	subi	r30, 0xCD	; 205
 694:	fe 4f       	sbci	r31, 0xFE	; 254
 696:	80 81       	ld	r24, Z
 698:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__EEPROM_REGION_LENGTH__+0x7f0090>
 69c:	05 c0       	rjmp	.+10     	; 0x6a8 <__vector_27+0x42>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART1_CONTROL &= ~_BV(UART1_UDRIE);
 69e:	e5 e9       	ldi	r30, 0x95	; 149
 6a0:	f0 e0       	ldi	r31, 0x00	; 0
 6a2:	80 81       	ld	r24, Z
 6a4:	8f 7d       	andi	r24, 0xDF	; 223
 6a6:	80 83       	st	Z, r24
    }
}
 6a8:	ff 91       	pop	r31
 6aa:	ef 91       	pop	r30
 6ac:	9f 91       	pop	r25
 6ae:	8f 91       	pop	r24
 6b0:	0f 90       	pop	r0
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	0f 90       	pop	r0
 6b6:	1f 90       	pop	r1
 6b8:	18 95       	reti

000006ba <__udivmodsi4>:
 6ba:	a1 e2       	ldi	r26, 0x21	; 33
 6bc:	1a 2e       	mov	r1, r26
 6be:	aa 1b       	sub	r26, r26
 6c0:	bb 1b       	sub	r27, r27
 6c2:	fd 01       	movw	r30, r26
 6c4:	0d c0       	rjmp	.+26     	; 0x6e0 <__udivmodsi4_ep>

000006c6 <__udivmodsi4_loop>:
 6c6:	aa 1f       	adc	r26, r26
 6c8:	bb 1f       	adc	r27, r27
 6ca:	ee 1f       	adc	r30, r30
 6cc:	ff 1f       	adc	r31, r31
 6ce:	a2 17       	cp	r26, r18
 6d0:	b3 07       	cpc	r27, r19
 6d2:	e4 07       	cpc	r30, r20
 6d4:	f5 07       	cpc	r31, r21
 6d6:	20 f0       	brcs	.+8      	; 0x6e0 <__udivmodsi4_ep>
 6d8:	a2 1b       	sub	r26, r18
 6da:	b3 0b       	sbc	r27, r19
 6dc:	e4 0b       	sbc	r30, r20
 6de:	f5 0b       	sbc	r31, r21

000006e0 <__udivmodsi4_ep>:
 6e0:	66 1f       	adc	r22, r22
 6e2:	77 1f       	adc	r23, r23
 6e4:	88 1f       	adc	r24, r24
 6e6:	99 1f       	adc	r25, r25
 6e8:	1a 94       	dec	r1
 6ea:	69 f7       	brne	.-38     	; 0x6c6 <__udivmodsi4_loop>
 6ec:	60 95       	com	r22
 6ee:	70 95       	com	r23
 6f0:	80 95       	com	r24
 6f2:	90 95       	com	r25
 6f4:	9b 01       	movw	r18, r22
 6f6:	ac 01       	movw	r20, r24
 6f8:	bd 01       	movw	r22, r26
 6fa:	cf 01       	movw	r24, r30
 6fc:	08 95       	ret

000006fe <__divmodsi4>:
 6fe:	05 2e       	mov	r0, r21
 700:	97 fb       	bst	r25, 7
 702:	16 f4       	brtc	.+4      	; 0x708 <__divmodsi4+0xa>
 704:	00 94       	com	r0
 706:	0f d0       	rcall	.+30     	; 0x726 <__negsi2>
 708:	57 fd       	sbrc	r21, 7
 70a:	05 d0       	rcall	.+10     	; 0x716 <__divmodsi4_neg2>
 70c:	d6 df       	rcall	.-84     	; 0x6ba <__udivmodsi4>
 70e:	07 fc       	sbrc	r0, 7
 710:	02 d0       	rcall	.+4      	; 0x716 <__divmodsi4_neg2>
 712:	46 f4       	brtc	.+16     	; 0x724 <__divmodsi4_exit>
 714:	08 c0       	rjmp	.+16     	; 0x726 <__negsi2>

00000716 <__divmodsi4_neg2>:
 716:	50 95       	com	r21
 718:	40 95       	com	r20
 71a:	30 95       	com	r19
 71c:	21 95       	neg	r18
 71e:	3f 4f       	sbci	r19, 0xFF	; 255
 720:	4f 4f       	sbci	r20, 0xFF	; 255
 722:	5f 4f       	sbci	r21, 0xFF	; 255

00000724 <__divmodsi4_exit>:
 724:	08 95       	ret

00000726 <__negsi2>:
 726:	90 95       	com	r25
 728:	80 95       	com	r24
 72a:	70 95       	com	r23
 72c:	61 95       	neg	r22
 72e:	7f 4f       	sbci	r23, 0xFF	; 255
 730:	8f 4f       	sbci	r24, 0xFF	; 255
 732:	9f 4f       	sbci	r25, 0xFF	; 255
 734:	08 95       	ret

00000736 <_exit>:
 736:	f8 94       	cli

00000738 <__stop_program>:
 738:	ff cf       	rjmp	.-2      	; 0x738 <__stop_program>
